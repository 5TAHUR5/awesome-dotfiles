#!/bin/sh
# Yes, I just took the pyfetch and remade it a little
# pyfetch: https://github.com/dylanaraps/pfetch

esc() {
    case $1 in
        CUU) e="${esc_c}[${2}A" ;;
        CUD) e="${esc_c}[${2}B" ;; 
        CUF) e="${esc_c}[${2}C" ;; 
        CUB) e="${esc_c}[${2}D" ;; 

        SGR)
            case ${PF_COLOR:=1} in
                (1)
                    e="${esc_c}[${2}m"
                ;;

                (0)
                    e=
                ;;
            esac
        ;;

        DECAWM)
            case $TERM in
                (dumb | minix | cons25)
                    e=
                ;;

                (*)
                    e="${esc_c}[?7${2}"
                ;;
            esac
        ;;
    esac
}

esc_p() {
    esc "$@"
    printf '%s' "$e"
}

has() {
    _cmd=$(command -v "$1") 2>/dev/null || return 1
    [ -x "$_cmd" ] || return 1
}

log() {
    [ "$2" ] || return
    name=$1
    use_seperator=$3
    {
        set -f
        set +f -- $2
        info=$*
    }
    printf '%s' "$name"
    printf %s ":"
    printf '%s' "$info"
    printf '|'
}

get_os() {
    [ "$distro" ] && {
        log "$os_icon" "$distro" >&6
        return
    }

    case $os in
        (Linux*)
            if has lsb_release; then
                distro=$(lsb_release -sd)
            elif [ -d /system/app ] && [ -d /system/priv-app ]; then
                distro="Android $(getprop ro.build.version.release)"

            elif [ -f /etc/os-release ]; then
                while IFS='=' read -r key val; do
                    case $key in
                        (PRETTY_NAME)
                            distro=$val
                        ;;
                    esac
                done < /etc/os-release

            else
                has crux && distro=$(crux)
                has guix && distro='Guix System'
            fi
            distro=${distro##[\"\']}
            distro=${distro%%[\"\']}
            case $PATH in
                (*/bedrock/cross/*)
                    distro='Bedrock Linux'
                ;;
            esac
            if [ "$WSLENV" ]; then
                distro="${distro}${WSLENV+ on Windows 10 [WSL2]}"
            elif [ -z "${kernel%%*-Microsoft}" ]; then
                distro="$distro on Windows 10 [WSL1]"
            fi
        ;;

        (Darwin*)
            while IFS='<>' read -r _ _ line _; do
                case $line in
                    ProductVersion)
                        IFS='<>' read -r _ _ mac_version _
                        continue
                    ;;

                    ProductName)
                        IFS='<>' read -r _ _ mac_product _
                        continue
                    ;;
                esac
            done < /System/Library/CoreServices/SystemVersion.plist
            case $mac_version in
                (10.4*)  distro='Mac OS X Tiger' ;;
                (10.5*)  distro='Mac OS X Leopard' ;;
                (10.6*)  distro='Mac OS X Snow Leopard' ;;
                (10.7*)  distro='Mac OS X Lion' ;;
                (10.8*)  distro='OS X Mountain Lion' ;;
                (10.9*)  distro='OS X Mavericks' ;;
                (10.10*) distro='OS X Yosemite' ;;
                (10.11*) distro='OS X El Capitan' ;;
                (10.12*) distro='macOS Sierra' ;;
                (10.13*) distro='macOS High Sierra' ;;
                (10.14*) distro='macOS Mojave' ;;
                (10.15*) distro='macOS Catalina' ;;
                (11*)    distro='macOS Big Sur' ;;
                (12*)    distro='macOS Monterey' ;;
                (*)      distro='macOS' ;;
            esac
            case $mac_product in
                (iP*) distro='iOS' ;;
            esac
            distro="$distro $mac_version"
        ;;

        (Haiku)
            distro=$(uname -sv)
        ;;

        (Minix|DragonFly)
            distro="$os $kernel"
            trap '' EXIT
        ;;

        (SunOS)
            IFS='(' read -r distro _ < /etc/release
        ;;

        (OpenBSD*)
            IFS=' =' read -r _ distro openbsd_ver _ <<-EOF
				$(sysctl kern.version)
			EOF

            distro="$distro $openbsd_ver"
        ;;

        (FreeBSD)
            distro="$os $(freebsd-version)"
        ;;

        (*)
            distro="$os $kernel"
        ;;
    esac
}

get_kernel() {
    case $os in
        (*BSD*|Haiku|Minix)
            return
        ;;
    esac
    log  "$kernel" >&6
}

get_uptime() {
    case $os in
        (Linux* | Minix* | SerenityOS*)
            IFS=. read -r s _ < /proc/uptime
        ;;

        (Darwin* | *BSD* | DragonFly*)
            s=$(sysctl -n kern.boottime)
            s=${s#*=}
            s=${s%,*}
            s=$(($(date +%s) - s))
        ;;

        (Haiku)
            s=$(($(system_time) / 1000000))
        ;;

        (SunOS)
            IFS='	.' read -r _ s _ <<-EOF
				$(kstat -p unix:0:system_misc:snaptime)
			EOF
        ;;

        (IRIX)
            t=$(LC_ALL=POSIX ps -o etime= -p 1)
            case $t in
                (*-*)   d=${t%%-*} t=${t#*-} ;;
                (*:*:*) h=${t%%:*} t=${t#*:} ;;
            esac

            h=${h#0} t=${t#0}
            s=$((${d:-0}*86400 + ${h:-0}*3600 + ${t%%:*}*60 + ${t#*:}))
        ;;
    esac
    d=$((s / 60 / 60 / 24))
    h=$((s / 60 / 60 % 24))
    m=$((s / 60 % 60))
    case "$d" in ([!0]*) uptime="${uptime}${d}d "; esac
    case "$h" in ([!0]*) uptime="${uptime}${h}h "; esac
    case "$m" in ([!0]*) uptime="${uptime}${m}m "; esac
    log 󱎫 "${uptime:-0m}" >&6
}

get_pkgs() {
    packages=$(
        case $os in
            (Linux*)
                has bonsai     && bonsai list
                has crux       && pkginfo -i
                has pacman-key && pacman -Qq
                has dpkg       && dpkg-query -f '.\n' -W
                has rpm        && rpm -qa
                has xbps-query && xbps-query -l
                has apk        && apk info
                has guix       && guix package --list-installed
                has opkg       && opkg list-installed
                has kiss       && printf '%s\n' /var/db/kiss/installed/*/
                has cpt-list   && printf '%s\n' /var/db/cpt/installed/*/
                has brew       && printf '%s\n' "$(brew --cellar)/"*
                has emerge     && printf '%s\n' /var/db/pkg/*/*/
                has pkgtool    && printf '%s\n' /var/log/packages/*
                has eopkg      && printf '%s\n' /var/lib/eopkg/package/*
                has nix-store  && {
                    nix-store -q --requisites /run/current-system/sw
                    nix-store -q --requisites ~/.nix-profile
                }
            ;;

            (Darwin*)
                has pkgin      && pkgin list
                has dpkg       && dpkg-query -f '.\n' -W
                has brew       && printf '%s\n' /usr/local/Cellar/*
                has port       && {
                    pkg_list=$(port installed)

                    case "$pkg_list" in
                        ("No ports are installed.")
                            # do nothing
                        ;;

                        (*)
                            printf '%s\n' "$pkg_list"
                        ;;
                    esac
                }
            ;;

            (FreeBSD*|DragonFly*)
                pkg info
            ;;

            (OpenBSD*)
                printf '%s\n' /var/db/pkg/*/
            ;;

            (NetBSD*)
                pkg_info
            ;;

            (Haiku)
                printf '%s\n' /boot/system/package-links/*
            ;;

            (Minix)
                printf '%s\n' /usr/pkg/var/db/pkg/*/
            ;;

            (SunOS)
                has pkginfo && pkginfo -i
                has pkg     && pkg list
            ;;

            (IRIX)
                versions -b
            ;;

            (SerenityOS)
                while IFS=" " read -r type _; do
                    [ "$type" != dependency ] &&
                        printf "\n"
                done < /usr/Ports/packages.db
            ;;
        esac | wc -l
    )
    packages=${packages#"${packages%%[![:space:]]*}"}
    packages=${packages%"${packages##*[![:space:]]}"}
    case $os in
        (IRIX)
            packages=$((packages - 3))
        ;;
        (OpenBSD)
            packages=$((packages))
        ;;
    esac

    case $packages in
        (1?*|[2-9]*)
            log  "$packages" >&6
        ;;
    esac
}

get_shell() {
    log shell "${SHELL##*/}" >&6
}

# get_os_icon() {
#     log os_icon "popa">&6
# }

get_username() {
    log  "$(whoami | sed 's/.*/\u&/')" >&6
}

get_os_icon() {
    print_os_icon() {
        os_icon=$1
    }
    case ${1:-${CF_ICON:-${distro:-$os}}} in
        ([Aa]lpine*)
            print_os_icon 
        ;;

        ([Aa]rch*)
            print_os_icon 󰣇
        ;;

        ([Aa]rco*)
            print_os_icon 
        ;;

        ([Aa]rtix*)
            print_os_icon 
        ;;

        ([Cc]ent[Oo][Ss]*)
            print_os_icon 
        ;;

        ([Cc]rystal*[Ll]inux)
            print_os_icon 
        ;;

        ([Dd]ebian*)
            print_os_icon 
        ;;

		([Dd]evuan*)
			print_os_icon 
		;;

        ([Ee]lementary*)
            print_os_icon 
        ;;

        ([Ee]ndeavour*)
            print_os_icon 
        ;;

        ([Ff]edora*)
            print_os_icon 
        ;;

        ([Ff]ree[Bb][Ss][Dd]*)
            print_os_icon 
        ;;

        ([Gg]entoo*)
            print_os_icon 
        ;;

        ([Gg]uix[Ss][Dd]*|[Gg]uix*)
            print_os_icon 
        ;;

        ([Hh]yperbola*)
            print_os_icon 
        ;;

        ([Kk][Dd][Ee]*[Nn]eon*)
            print_os_icon 
        ;;

        ([Ll]inux*[Mm]int*|[Mm]int)
            print_os_icon 
        ;;

        ([Ll]inux*)
            print_os_icon 
        ;;

        ([Mm]ac[Oo][Ss]*|[Dd]arwin*)
            print_os_icon 
        ;;

        ([Mm]ageia*)
            print_os_icon 
        ;;

        ([Mm]anjaro*)
            print_os_icon 
        ;;

        ([Mm][Xx]*)
            print_os_icon 
        ;;

        ([Nn]ix[Oo][Ss]*)
            print_os_icon 
        ;;

        ([Oo]pen[Bb][Ss][Dd]*)
            print_os_icon 
        ;;

        ([Oo]pen[Ss][Uu][Ss][Ee]*|[Oo]pen*SUSE*|SUSE*|suse*)
            print_os_icon 
        ;;

        ([Pp]arabola*)
            print_os_icon 
        ;;

        ([Pp]op!_[Oo][Ss]*)
            print_os_icon 
        ;;

        ([Pp]ure[Oo][Ss]*)
            print_os_icon 󰹟
        ;;

        ([Rr]aspbian*)
            print_os_icon 
        ;;

        ([Ss]lackware*)
            print_os_icon 
        ;;

        ([Ss]olus*)
            print_os_icon 
        ;;

        ([Uu]buntu*)
            print_os_icon 
        ;;

        ([Vv]oid*)
            print_os_icon 
        ;;

        (*)
            print_os_icon 
            exit 1
        ;;
    esac
}

get_wm() {
    log "" "Awesome WM" >&6
}

main() {
    case $* in
        -v)
            printf '%s 0.7.0\n' "${0##*/}"
            return 0
        ;;

        -d)
        ;;

        '')
            exec 2>/dev/null
        ;;

        *)
            cat <<EOF
${0##*/}     show system information
${0##*/} -d  show stderr (debug mode)
${0##*/} -v  show version information
EOF
            return 0
        ;;
    esac
    exec 6>&1 >/dev/null
    read -r os kernel arch <<-EOF
		$(uname -srm)
	EOF
    get_os
    get_os_icon
    get_uptime
    get_username
    get_os
    get_kernel
    get_pkgs
    get_wm
}

main "$@"